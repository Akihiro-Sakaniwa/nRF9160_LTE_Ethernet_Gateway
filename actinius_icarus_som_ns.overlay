// To get started, press Ctrl+Space (or Option+Esc) to bring up the completion menu and view the available nodes.

// You can also use the buttons in the sidebar to perform actions on nodes.
// Actions currently available include:

// * Enabling / disabling the node
// * Adding the bus to a bus
// * Removing the node
// * Connecting ADC channels

// For more help, browse the DeviceTree documentation at https://docs.zephyrproject.org/latest/guides/dts/index.html
// You can also visit the nRF DeviceTree extension documentation at https://nrfconnect.github.io/vscode-nrf-connect/devicetree/nrfdevicetree.html
/*
 * Copyright (c) 2022 Actinius
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 /delete-node/ &storage_partition;
 / {
     chosen {
         zephyr,console = &uart0;
         //zephyr,shell-uart = &uart1;
         //zephyr,uart-mcumgr = &uart1;
         //nordic,pm-ext-flash = &w25q64;
     };
 
     leds {
         compatible = "gpio-leds";
 
         blue_led: led_0 {
             gpios = <&gpio0 3 GPIO_ACTIVE_HIGH>;
             label = "Blue LED";
         };
     };
 
     buttons {
         compatible = "gpio-keys";
 
         button0: button_0 {
             gpios = <&gpio0 23 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
             label = "Push Button 1";
         };
     };
 
     aliases {
         led0 = &blue_led;
         sw0 = &button0;
         bootloader-led0 = &blue_led;
         mcuboot-button0 = &button0;
         mcuboot-led0 = &blue_led;
         watchdog0 = &wdt0;
         spi-flash0 = &w25q64;
     };
     sim_select: sim-select {
         compatible = "actinius-sim-select";
         sim-gpios = <&gpio0 12 GPIO_ACTIVE_HIGH>;
         sim = "external";
     };
 };
 


 &adc {
     status ="okay";
 };
 
 &gpiote {
     status = "okay";
 };
 
 &gpio0 {
     status = "okay";
 };
 
// &uart0 {
//     status = "disabled";
// };
// &uart1 {
//    status = "okay";
//
//    current-speed = <115200>;
//    pinctrl-0 = <&uart1_default>;
//    pinctrl-1 = <&uart1_sleep>;
//    pinctrl-names = "default", "sleep";
//};
 
 &spi1 {
	compatible = "nordic,nrf-spim";
	status = "okay";

	cs-gpios = <&gpio0 7 GPIO_ACTIVE_LOW>;

    pinctrl-0 = <&spi1_default>;
    pinctrl-1 = <&spi1_sleep>;
	pinctrl-names = "default", "sleep";
	eth0: eth0@0 {
        //compatible = "microchip,enc424j600";
		compatible = "wiznet,w5500";
		//compatible = "microchip,enc28j60";
		reg = <0>;
		spi-max-frequency = <80000000>;
        int-gpios = <&gpio0 1 GPIO_ACTIVE_LOW>;
        //local-mac-address = [XX XX XX XX XX XX];
    };
 };
 
 &i2c2 {
     status = "disabled";
 };

//&spi2 {
//    compatible = "nordic,nrf-spim";
//    status = "okay";
//
//    cs-gpios = <&gpio0 0 GPIO_ACTIVE_LOW>;
//
//    pinctrl-0 = <&spi2_default>;
//    pinctrl-1 = <&spi2_sleep>;
//    pinctrl-names = "default", "sleep";
//}; 


 &spi3 {
     compatible = "nordic,nrf-spim";
     status = "okay";
 
     cs-gpios = <&gpio0 24 GPIO_ACTIVE_LOW>;
 
     pinctrl-0 = <&spi3_default>;
     pinctrl-1 = <&spi3_sleep>;
     pinctrl-names = "default", "sleep";
     w25q64: w25q64jv@0 {
         compatible = "jedec,spi-nor";
         reg = <0>;
         spi-max-frequency = <80000000>;
         jedec-id = [ef 40 17];
         size = <0x4000000>;
         has-dpd;
         t-enter-dpd = <3500>;
         t-exit-dpd = <3500>;
     };
 };

 &pinctrl {
	uart1_default: uart1_default {
		group1 {
			psels = <NRF_PSEL(UART_TX, 0, 4)>,
				<NRF_PSEL(UART_RX, 0, 5)>;
		};
	};
	uart1_sleep: uart1_sleep {
		group1 {
			psels = <NRF_PSEL(UART_TX, 0, 4)>,
				<NRF_PSEL(UART_RX, 0, 5)>;
			low-power-enable;
		};
	};

	//spi2_default: spi2_default {
	//	group1 {
	//		psels = <NRF_PSEL(SPIM_SCK, 0, 20)>,
	//			<NRF_PSEL(SPIM_MOSI, 0, 19)>,
	//			<NRF_PSEL(SPIM_MISO, 0, 18)>;
	//	};
	//};
	//spi2_sleep: spi2_sleep {
	//	group1 {
	//		psels = <NRF_PSEL(SPIM_SCK, 0, 20)>,
	//			<NRF_PSEL(SPIM_MOSI, 0, 19)>,
	//			<NRF_PSEL(SPIM_MISO, 0, 18)>;
	//		low-power-enable;
	//	};
 //   };

    spi1_default: spi1_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0,27)>,
                <NRF_PSEL(SPIM_MISO, 0, 26)>,
                <NRF_PSEL(SPIM_MOSI, 0, 0)>;
        };
    };
    spi1_sleep: spi1_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0,27)>,
                <NRF_PSEL(SPIM_MISO, 0, 26)>,
                <NRF_PSEL(SPIM_MOSI, 0, 0)>;
            low-power-enable;
        };
    };

	spi3_default: spi3_default {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 22)>,
				<NRF_PSEL(SPIM_MOSI, 0, 25)>,
				<NRF_PSEL(SPIM_MISO, 0, 21)>;
		};
	};
	spi3_sleep: spi3_sleep {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 22)>,
				<NRF_PSEL(SPIM_MOSI, 0, 25)>,
				<NRF_PSEL(SPIM_MISO, 0, 21)>;
			low-power-enable;
		};
	};
};
 

